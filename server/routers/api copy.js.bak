
/**
 * restful api 子路由
 */

const router = require('koa-router')()
const db = require("../db/mongodb/db")

// const apiController = require('../controllers/apiController')

// const routers = router
//   .get('/getHot', apiController.getLoginUserInfo)
//   .get('/user/getAllUsers', apiController.getAllUsers)
//   .post('/user/signIn', apiController.signIn)
//   .post('/user/signUp', apiController.signUp)

// 推荐文章
router.get("/getHot", async (ctx, next) => {
  let hot = await db.article.find(
    { publish: true },
    { title: 1, articleId: 1, tag: 1 },
    { sort: { pv: -1 } },
    (err, doc) => {
      if (err) {
        console.log(err)
      }
    }).limit(5)
  ctx.body = hot
})

// 获取标签
router.get('/tags', async (ctx, next) => {
  let publish = ctx.query.publish === "false" ? false : true
  let tagArr = []
  // 所有的标签
  // tagArr = await db.article.find({ publish: publish }).distinct("tag", (err, doc) => { })
  // 所有的文章
  let docs = await db.article.find({ publish: publish }, { tag: 1, _id: 0 })
  let tagMap = {}
  // 计算标签的文章数
  docs.forEach((doc, index, arr) => {
    for (const tag of doc.tag) {
      tagMap[tag] = tagMap[tag] ? tagMap[tag] + 1 : 1
    }
  })
  for (const key in tagMap) {
    if (tagMap.hasOwnProperty(key)) {
      tagArr.push({
        tag: key,
        num: tagMap[key]
      })
    }
  }
  ctx.body = tagArr
})

// 获取时间轴
router.get('/getTime', async (ctx, next) => {
  let publish = ctx.query.publish === "false" ? false : true
  let timeArr = []
  let doc = await db.article.find(
    { publish: publish }, // 查询条件
    { date: 1 }, // 指定返回的字段
    // (err, doc) => {
    //     if (err) {
    //         console.log('查询数据库报错', err)
    //     }
    // }
  )
  let timeMap = {}
  doc.forEach((item, index, arr) => {
    let yearMonth = new Date(item.date).getFullYear() + "年" + (new Date(item.date).getMonth() + 1) + "月"
    timeMap[yearMonth] = timeMap[yearMonth] ? timeMap[yearMonth] + 1 : 1
  })
  for (const key in timeMap) {
    if (timeMap.hasOwnProperty(key)) {
      timeArr.push({
        time: key,
        num: timeMap[key]
      })
    }
  }
  // console.log('getTime', timeArr)
  ctx.body = timeArr
})

// 获取文章数量
router.get('/getCount', async (ctx, next) => {
  let publish = ctx.query.publish === "false" ? false : true
  let num = 0
  // 首页请求
  if (!ctx.query.tag && !ctx.query.start && !ctx.query.key) {
    num = await db.article.count({ publish: publish }, (err, num) => { })
  }
  // 通过文章标签请求
  if (ctx.query.tag) {
    let tag = ctx.query.tag
    num = await db.article.count({ publish: publish, tag: tag }, (err, num) => { })
  }
  // 前台后台时间范围请求
  if (ctx.query.start) {
    let start = new Date(parseInt(ctx.query.start))
    let end = new Date(parseInt(ctx.query.end))
    num = await db.article.count({ publish: ctx.query.publish, date: { "$gte": start, "$lte": end } }, (err, num) => {
      // if (err) {
      //     res.status(500).end()
      // } else {
      //     res.json(num)
      // }
    })
  }
  // 前台后台关键词搜索请求
  if (ctx.query.key) {
    num = await db.article.count({ publish: ctx.query.publish, title: { $regex: ctx.query.key, $options: "i" } }, (err, num) => {
      // if (err) {
      //     res.status(500).end()
      // } else {
      //     res.json(num)
      // }
    })
  }
  ctx.body = num
})

// 抓取文章列表
router.get('/getArticles', async (ctx, next) => {
  let params = {}
  let limit = 8
  let skip = ctx.query.page * limit - limit
  if (!ctx.query.tag) {  // 抓取首页文章
    params = {
      publish: ctx.query.publish
    }
  } else {
    params = {
      publish: ctx.query.publish,
      tag: ctx.query.tag
    }
  }
  let articles = await db.article
    .find(params, { content: 0 }, (err, doc) => { })
    .sort({ "_id": -1 })
    .skip(skip)
    .limit(limit)
  ctx.body = articles
})

module.exports = router